require 'projectEuler'

# 5.936s
class Problem_0044
  def title; 'Pentagon numbers' end
  def solution; 5_482_660 end

  # Pentagonal numbers are generated by the formula, P[n]=n(3n-1)/2. The first
  # ten pentagonal numbers are:
  #
  #     1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...
  #
  # It can be seen that P[4] + P[7] = 22 + 70 = 92 = P[8]. However, their
  # difference, 70 - 22 = 48, is not pentagonal.
  #
  # Find the pair of pentagonal numbers, P[j] and P[k], for which their sum
  # and difference is pentagonal and D = |P[k] - P[j]| is minimised; what is 
  # the value of D?

  def solve
    # Assume a large D to start.
    min = 2 << (0.size << 3) - 1
    j, dj = 5, 4

    # Advance pentagonal numbers by adding a delta (which accelerates).  Stop
    # when the delta gets bigger than our current minimum, since the next
    # number's nearest neighbor will be too far away to generate a smaller D.
    while dj < min
      # Step backwards through the numbers less than the current one.
      k, dk = j - dj, dj

      # Stop looking backwards when the pair is too far apart to result in a
      # smaller minimum.
      while 1 < dk && j - k < min
        d = (24*(j - k) + 1)**0.5
        
        # Check for pentagonality of difference.
        if d == d.to_i && 5 == d % 6
          s = (24*(j + k) + 1)**0.5
          
          # Check for pentagonality of sum.
          min = j - k if s == s.to_i && 5 == s % 6
        end
      
        dk -= 3
        k -= dk
      end

      dj += 3
      j += dj
    end

    min
  end
end
