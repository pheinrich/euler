require 'projectEuler'

# Triangular, pentagonal, and hexagonal
class Problem_0045
  # Triangle, pentagonal, and hexagonal numbers are generated by the following
  # formulae:
  #
  #     Triangle    T[n]=n(n+1)/2   1, 3,  6, 10, 15, ...
  #     Pentagonal  P[n]=n(3n-1)/2  1, 5, 12, 22, 35, ...
  #     Hexagonal   H[n]=n(2n-1)    1, 6, 15, 28, 45, ...
  #
  # It can be verified that T[285] = P[165] = H[143] = 40755.
  #
  # Find the next triangle number that is also pentagonal and hexagonal.

  def self.solve( t, p, h )
    # Every hexagonal number is also triangular, so just look for numbers
    # that are also pentagonal.
    dp, dh = 3*p + 1, 4*h + 1
    p = h = 2*h*h - h

    begin
      # Advance to the next hexagonal number.
      h += dh
      dh += 4

      # Advance pentagonal numbers until we reach the current hexagonal one.
      while p < h
        p += dp
        dp += 3
      end
    end while p != h

    puts p
  end
end

ProjectEuler.time do
  # 1533776805 (0.01600s)
  Problem_0045.solve( 285, 165, 143 )
end
