require 'projectEuler'

class Problem_0140
  def title; 'Modified Fibonacci golden nuggets' end
  def difficulty; 55 end

  # Consider the infinite polynomial series A_G(x) = xG_1 + x^2G_2 + x^3G_3 +
  # ..., where G_k is the kth term of the second order recurrence relation G_k
  # = G_(k−1) + G_(k−2,) G_1 = 1 and G_2 = 4; that is, 1, 4, 5, 9, 14, 23,
  # ... .
  #
  # For this problem we shall be concerned with values of x for which A_G(x)
  # is a positive integer.
  #
  # The corresponding values of x for the first five natural numbers are shown
  # below.
  #
  #        x      A_G(x)
  #     (√5−1)/4    1
  #       2/5       2
  #    (√22−2)/6    3
  #   (√137−5)/14   4
  #       1/2       5
  #
  # We shall call A_G(x) a golden nugget if x is rational, because they become
  # increasingly rarer; for example, the 20th golden nugget is 211345365.
  #
  # Find the sum of the first thirty golden nuggets.

  def solve( n = 30 )
    # Like we did for problem 137, we'd like to find a closed-form expression
    # for A_G(x), since that will make analysis easier. We'll derive it for
    # the modified initial conditions and see it they affect the formula.
    #                ∞
    #   A_G(x) = g = ∑ x^k·G_k   
    #               k=0
    #
    # We can compute the first few terms of the sum and note that
    #          ∞           ∞               ∞
    #   xg = x·∑ x^k·G_k = ∑ x^(k+1)·G_k = ∑ x^k·G_(k-1), and
    #         k=0         k=0             k=1
    #              ∞           ∞               ∞
    #   x^2g = x^2·∑ x^k·G_k = ∑ x^(k+2)·G_k = ∑ x^k·G_(k-2), so
    #             k=0         k=0             k=2
    #               ∞               ∞
    #   xg + x^2g = ∑ x^k·G_(k-1) + ∑ x^k·G_(k-2)
    #              k=1             k=2
    #                      ∞
    #             = xG_0 + ∑ x^k[G_(k-2) + G_(k-1)]
    #                     k=2
    #             = xG_0 + (g - G_0 - xG_1)
    #
    # Now rearrange terms and simplify:
    #
    #   xg + x^2g = xG_0 + (g(x) - G_0 - xG_1)
    #             = xG_0 + g - G_0 - xG_1
    #   xg + x^2g - g = xG_0 - G_0 - xG_1            (x - 1)G_0 - xG_1
    #   g(x^2 + x - 1) = (x - 1)G_0 - xG_1  ==>  g = -----------------
    #                                                  x^2 + x - 1
    #
    # After multiplying by -1/-1, we see substantially the same equation as
    # the one we used for problem 137, and in fact setting G_0 = 0 and G_1 = 1
    # shows it is identical. For this problem, we infer G_0 = 3 from the G_1
    # and G_2 given, leading to the closed-form:
    #
    #             3 - 2x
    #   g(x) = ----------- - 3
    #          1 - x - x^2 
    #
    # The final -3 term is necessary to offset the result by G_0. Working from
    # the closed form, we can now solve for x and try to identify when it will
    # be rational. Rearranging terms and applying the Quadratic Formula:
    #
    #          3 - 2x
    #   y = ----------- - 3 = y - yx - yx^2 + 3 - 3x - 3x^2 - 3 + 2x
    #       1 - x - x^2
    #                       = yx^2 + 3x^2 + yx + x - y
    #                       = (y + 3)x^2 + (y + 1)x - y
    #
    #     -(y + 1) ± √(y^2 + 2y + 1 + 4y^2 + 12y)   -y - 1 ± √(5y^2 + 14y + 1)
    # x = --------------------------------------- = --------------------------
    #                   2(y + 3)                             2y + 6
    #
    # As in problem 137, we can see that the only rational values for x will
    # be obtained when 5y^2 + 14y + 1 is a square number. Again, we use this
    # criteria to generate the first several golden nuggets by brute force,
    # but this time, OEIS produces no convenient matching sequence.
    #
    # Upon examination, we're able to detect relationships between the F_n and
    # G_n, although they differ for even and odd terms.
    sum = 0
    f, g = [1, 0], [3, 1]
    n -= 1

    # Pre-compute Fibonacci terms and terms of the modified Fibonacci sequence
    # (faster than calling fib() repeatedly). Only initialize enough for our
    # purposes. Note that we generate the regular Fibonacci terms starting at
    # index -1, which we need for the first even term of the target sequence.
    (n + 4).times do |i|
      f << f[i] + f[i+1]
      g << g[i] + g[i+1]
    end

    # Even and odd terms are generated by different formulas.
    0.step( n, 2 ) {|i| sum += f[i+3] * (f[i+5] - f[i])}
    1.step( n, 2 ) {|i| sum += f[i+2] * g[i+2]}

    sum
  end

  def solution; 'NTY3MzgzNTM1Mjk5MA==' end
  def best_time; 0.00002980 end
  def effort; 35 end

  def completed_on; '2016-08-10' end
  def ordinality; 2_862 end
  def population; 621_136 end

  def refs
    ['http://oeis.org/A000285',
     'http://oeis.org/A104449',
     'http://math.stackexchange.com/a/88562']
  end
end
